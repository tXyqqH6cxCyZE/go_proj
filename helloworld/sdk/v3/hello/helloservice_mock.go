// Code generated by MockGen. DO NOT EDIT.
// Source: .///hello/helloserviceinf.go

// Package hello is a generated GoMock package.
package hello

import (
	gomock "github.com/golang/mock/gomock"
	thrift "micode.be.xiaomi.com/systech/soa/thrift"
	reflect "reflect"
)

// MockHelloServiceInf is a mock of HelloServiceInf interface
type MockHelloServiceInf struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceInfMockRecorder
}

// MockHelloServiceInfMockRecorder is the mock recorder for MockHelloServiceInf
type MockHelloServiceInfMockRecorder struct {
	mock *MockHelloServiceInf
}

// NewMockHelloServiceInf creates a new mock instance
func NewMockHelloServiceInf(ctrl *gomock.Controller) *MockHelloServiceInf {
	mock := &MockHelloServiceInf{ctrl: ctrl}
	mock.recorder = &MockHelloServiceInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelloServiceInf) EXPECT() *MockHelloServiceInfMockRecorder {
	return m.recorder
}

// SetTimeout mocks base method
func (m *MockHelloServiceInf) SetTimeout(connTimeout, readTimeout uint32) {
	m.ctrl.Call(m, "SetTimeout", connTimeout, readTimeout)
}

// SetTimeout indicates an expected call of SetTimeout
func (mr *MockHelloServiceInfMockRecorder) SetTimeout(connTimeout, readTimeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockHelloServiceInf)(nil).SetTimeout), connTimeout, readTimeout)
}

// SetContext mocks base method
func (m *MockHelloServiceInf) SetContext(ctx *thrift.XContext) {
	m.ctrl.Call(m, "SetContext", ctx)
}

// SetContext indicates an expected call of SetContext
func (mr *MockHelloServiceInfMockRecorder) SetContext(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockHelloServiceInf)(nil).SetContext), ctx)
}

// SetMethodTimeout mocks base method
func (m *MockHelloServiceInf) SetMethodTimeout(method string, timeout uint32) {
	m.ctrl.Call(m, "SetMethodTimeout", method, timeout)
}

// SetMethodTimeout indicates an expected call of SetMethodTimeout
func (mr *MockHelloServiceInfMockRecorder) SetMethodTimeout(method, timeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMethodTimeout", reflect.TypeOf((*MockHelloServiceInf)(nil).SetMethodTimeout), method, timeout)
}

// SetBalanceKey mocks base method
func (m *MockHelloServiceInf) SetBalanceKey(balanceKey string) {
	m.ctrl.Call(m, "SetBalanceKey", balanceKey)
}

// SetBalanceKey indicates an expected call of SetBalanceKey
func (mr *MockHelloServiceInfMockRecorder) SetBalanceKey(balanceKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalanceKey", reflect.TypeOf((*MockHelloServiceInf)(nil).SetBalanceKey), balanceKey)
}

// SetParentRpcId mocks base method
func (m *MockHelloServiceInf) SetParentRpcId(rpcId int32) {
	m.ctrl.Call(m, "SetParentRpcId", rpcId)
}

// SetParentRpcId indicates an expected call of SetParentRpcId
func (mr *MockHelloServiceInfMockRecorder) SetParentRpcId(rpcId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParentRpcId", reflect.TypeOf((*MockHelloServiceInf)(nil).SetParentRpcId), rpcId)
}

// SetLogId mocks base method
func (m *MockHelloServiceInf) SetLogId(logId int64) {
	m.ctrl.Call(m, "SetLogId", logId)
}

// SetLogId indicates an expected call of SetLogId
func (mr *MockHelloServiceInfMockRecorder) SetLogId(logId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogId", reflect.TypeOf((*MockHelloServiceInf)(nil).SetLogId), logId)
}

// HelloWorld mocks base method
func (m *MockHelloServiceInf) HelloWorld(name string) (*Result_, error) {
	ret := m.ctrl.Call(m, "HelloWorld", name)
	ret0, _ := ret[0].(*Result_)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelloWorld indicates an expected call of HelloWorld
func (mr *MockHelloServiceInfMockRecorder) HelloWorld(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloWorld", reflect.TypeOf((*MockHelloServiceInf)(nil).HelloWorld), name)
}
